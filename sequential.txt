;;;; utils

(define (id-element id)
  (js-eval (string-append "document.getElementById('" id "')")))

(define first car)
(define second cadr)
(define third caddr)

(define rest cdr)

(define (displayln text)
  (display text)
  (newline))

;;;; with-handlers

(define (input-listener-cont . args) (display "Handler called with no listener continuation up"))

(define-syntax with-handlers
  (syntax-rules ()
    ((with-handlers handlers body ...)
     (begin
       (setup-handlers handlers)
       (begin body ...)
       (remove-handlers handlers)))))

(define (setup-handlers handlers)
  (process-handlers handlers second))

(define (remove-handlers handlers)
  (process-handlers handlers third))

(define (process-handlers handlers part)
  (map (lambda (handler)
         (let ((handler-func (part (assq (first handler) handlers-impl)))
               (handler-args (rest handler)))
           (apply handler-func handler-args)))
       handlers))

(define handlers-impl
  (list
   (list 'click-handler
         (lambda (id)
           (set-handler! (id-element id) "onclick" 'on-click-handler))
         (lambda (id)
           (remove-handler! (id-element id)  "onclick")))
   (list 'timeout-handler
         (lambda (timeout)
           (set-timeout! 'on-timeout-handler timeout))
         (lambda (timeout)
           #f))))

(define (on-click-handler this event)
  (input-listener-cont (list 'click this)))

(define (on-timeout-handler)
  (input-listener-cont (list 'timeout)))

;;;; get-input

(define-syntax get-input
  (syntax-rules ()
    ((get-input)
     (shift c (set! input-listener-cont c)))))

(define (test)
  (with-handlers '((click-handler "symbols"))
    (let ((input (get-input)))
      (displayln "get-input returned")
      (displayln input))))
